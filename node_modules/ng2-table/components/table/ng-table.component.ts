import { Component, EventEmitter, Input, Output, Compiler } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';

@Component({
  // moduleId: module.id,
  selector: 'ng-table',
  styles: [`
    .table-fixed {
      'table-layout':'fixed',
       'word-wrap': 'break-word'
      }
  `],
  templateUrl: './ng-table.component.html'
})
export class NgTableComponent {
  // Table values
  @Input() public rows: Array<any> = [];

  @Input()
  public set config(conf: any) {
    if (!conf.className) {
      conf.className = 'table-striped table-bordered table-responsive';
    }
    if (conf.className instanceof Array) {
      conf.className = conf.className.join(' ');
    }

    this._config = conf;
  }

  // Outputs (Events)
  @Output() public tableChanged: EventEmitter<any> = new EventEmitter();
  @Output() public cellClicked: EventEmitter<any> = new EventEmitter();

  public showFilterRow: Boolean = false;
  private styleName: any[];

  @Input()
  public set columns(values: Array<any>) {
    values.forEach((value: any) => {
      if (value.filtering) {
        this.showFilterRow = true;
      }
      if (value.className && value.className instanceof Array) {
        value.className = value.className.join(' ');
      }
      let column = this._columns.find((col: any) => col.name === value.name);
      if (column) {
        Object.assign(column, value);
      }
      if (!column) {
        this._columns.push(value);
      }
    });
  }

  private _columns: Array<any> = [];
  private _config: any = {};

  public constructor(private sanitizer: DomSanitizer) {
  }

  public sanitize(html: string): SafeHtml {
    return this.sanitizer.bypassSecurityTrustHtml(html);
  }

  public get columns(): Array<any> {
    return this._columns;
  }

  public get config(): any {
    return this._config;
  }

  public get configColumns(): any {
    let sortColumns: Array<any> = [];

    this.columns.forEach((column: any) => {
      if (column.sort) {
        sortColumns.push(column);
      }
    });

    return { columns: sortColumns };
  }

  public onChangeTable(column: any): void {
    this._columns.forEach((col: any) => {
      if (col.name !== column.name && col.sort !== false) {
        col.sort = '';
      }
    });
    this.tableChanged.emit({ sorting: this.configColumns });
  }

  public getData(row: any, propertyName: string, dateFormat: string): string {
    return propertyName.split('.').reduce((prev: any, curr: string) => prev[curr], row);
  }

  public cellClick(row: any, column: any): void {
    this.cellClicked.emit({ row, column });
  }

  // Ported from jquery-ui datepicker formatDate    
  formatDate(date: Date, format: any, yearAdd: number) {
    if (!date) {
      return "";
    }

    let iFormat: any,
      lookAhead = (match: any) => {
        let matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
        if (matches) {
          iFormat++;
        }
        return matches;
      },
      formatNumber = (match: any, value: any, len: any) => {
        let num = "" + value;
        if (lookAhead(match)) {
          while (num.length < len) {
            num = "0" + num;
          }
        }
        return num;
      },
      formatName = (match: any, value: any, shortNames: any, longNames: any) => {
        return (lookAhead(match) ? longNames[value] : shortNames[value]);
      },
      output = "",
      literal = false;

    if (date) {
      for (iFormat = 0; iFormat < format.length; iFormat++) {
        if (literal) {
          if (format.charAt(iFormat) === "'" && !lookAhead("'"))
            literal = false;
          else
            output += format.charAt(iFormat);
        }
        else {
          switch (format.charAt(iFormat)) {
            case "d":
              output += formatNumber("d", date.getDate(), 2);
              break;
            case "o":
              output += formatNumber("o",
                Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
              break;
            case "m":
              output += formatNumber("m", date.getMonth() + 1, 2);
              break;
            case "y":
              let _year = date.getFullYear();
              if(yearAdd) _year += yearAdd;
              output += (lookAhead("y") ? _year :
                (_year % 100 < 10 ? "0" : "") + _year % 100);
              break;
            case "'":
              if (lookAhead("'"))
                output += "'";
              else
                literal = true;

              break;
            default:
              output += format.charAt(iFormat);
          }
        }
      }
    }
    return output;
  }

}
